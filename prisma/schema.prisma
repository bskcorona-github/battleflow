generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model MC {
  id            Int         @id @default(autoincrement())
  name          String      @unique(map: "MC_name_key")
  affiliation   String?
  description   String?     @db.Text
  hood          String?
  image         String?
  likesCount    Int         @default(0)
  commentsCount Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  comments      MCComment[]
  likes         Like[]
  ranking       MCRank?

  @@map("mc")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
  @@map("session")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean       @default(false)
  accounts      Account[]
  mcComments    MCComment[]
  rankComments  RankComment[]
  likes         Like[]
  sessions      Session[]
  votes         Vote[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
  @@map("verificationtoken")
}

model Video {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int

  @@map("video")
}

model video_sengoku {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_umb {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_kok {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_ng {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_gaisen {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_adrenaline {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_fsl {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_batou {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_kuchigenka {
  id           String   @id
  title        String
  thumbnail    String
  publishedAt  DateTime
  channelId    String
  channelTitle String
  viewCount    Int
  duration     String
}

model video_battlesummit {
  id            String   @id
  title         String
  thumbnail     String
  publishedAt   DateTime
  channelId     String
  channelTitle  String
  viewCount     Int
  duration      String
  sourceChannel String
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String
  mcId      Int
  createdAt DateTime @default(now())
  mc        MC       @relation(fields: [mcId], references: [id], map: "Like_mcId_fkey")
  user      User     @relation(fields: [userId], references: [id], map: "Like_userId_fkey")

  @@unique([userId, mcId], map: "Like_userId_mcId_key")
  @@index([mcId], map: "Like_mcId_fkey")
  @@map("like")
}

model MCComment {
  id        Int         @id @default(autoincrement())
  content   String      @db.Text
  userId    String
  mcId      Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  parentId  Int?
  mc        MC          @relation(fields: [mcId], references: [id])
  parent    MCComment?  @relation("MCCommentReplies", fields: [parentId], references: [id])
  replies   MCComment[] @relation("MCCommentReplies")
  user      User        @relation(fields: [userId], references: [id])

  @@index([mcId], map: "comments_mc_mcId_fkey")
  @@index([parentId], map: "comments_mc_parentId_fkey")
  @@index([userId], map: "comments_mc_userId_fkey")
  @@map("comments_mc")
}

model RankComment {
  id        Int           @id @default(autoincrement())
  content   String        @db.Text
  userId    String
  mcRankId  Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parentId  Int?
  mcRank    MCRank        @relation(fields: [mcRankId], references: [id])
  parent    RankComment?  @relation("RankCommentReplies", fields: [parentId], references: [id])
  replies   RankComment[] @relation("RankCommentReplies")
  user      User          @relation(fields: [userId], references: [id])

  @@index([mcRankId], map: "comments_rank_mcRankId_fkey")
  @@index([parentId], map: "comments_rank_parentId_fkey")
  @@index([userId], map: "comments_rank_userId_fkey")
  @@map("comments_rank")
}

model MCRank {
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  mcId               Int           @unique
  totalScore         Float         @default(0) @map("total_score")
  rhymeScore         Float         @default(0) @map("rhyme_score")
  vibesScore         Float         @default(0) @map("vibes_score")
  flowScore          Float         @default(0) @map("flow_score")
  dialogueScore      Float         @default(0) @map("dialogue_score")
  musicalityScore    Float         @default(0) @map("musicality_score")
  rawTotalScore      Float         @default(0) @map("raw_total_score")
  rawRhymeScore      Float         @default(0) @map("raw_rhyme_score")
  rawVibesScore      Float         @default(0) @map("raw_vibes_score")
  rawFlowScore       Float         @default(0) @map("raw_flow_score")
  rawDialogueScore   Float         @default(0) @map("raw_dialogue_score")
  rawMusicalityScore Float         @default(0) @map("raw_musicality_score")
  voteCount          Int           @default(0) @map("vote_count")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @default(now()) @updatedAt @map("updated_at")
  comments           RankComment[]
  mc                 MC            @relation(fields: [mcId], references: [id])
  votes              Vote[]

  @@map("mc_rank")
}

model Vote {
  id         Int      @id @default(autoincrement())
  mcId       Int      @map("mc_id")
  userId     String   @map("user_id")
  rhyme      Int
  vibes      Int
  flow       Int
  dialogue   Int
  musicality Int
  createdAt  DateTime @default(now()) @map("created_at")
  mc         MCRank   @relation(fields: [mcId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([mcId, userId])
  @@index([userId], map: "votes_user_id_fkey")
  @@map("votes")
}

model PageView {
  id        Int      @id @default(autoincrement())
  path      String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("page_views")
}
